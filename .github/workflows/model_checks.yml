name: Model Architecture Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check-model-architecture:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision pytest

    - name: Create test file
      run: |
        cat > test_model.py << 'EOL'
        import torch
        import pytest
        from model import Net

        def test_parameter_count():
            model = Net()
            total_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
            assert total_params < 20000, f"Model has {total_params} parameters, should be less than 20000"

        def test_batch_norm_usage():
            model = Net()
            has_batch_norm = any(isinstance(m, torch.nn.BatchNorm2d) for m in model.modules())
            assert has_batch_norm, "Model should use Batch Normalization"

        def test_dropout_usage():
            model = Net()
            has_dropout = any(isinstance(m, torch.nn.Dropout) for m in model.modules())
            assert has_dropout, "Model should use Dropout"

        def test_gap_usage():
            model = Net()
            # Check for GAP (AdaptiveAvgPool2d) or absence of FC layers
            has_gap = any(isinstance(m, torch.nn.AdaptiveAvgPool2d) for m in model.modules())
            fc_layers = [m for m in model.modules() if isinstance(m, torch.nn.Linear)]
            
            assert has_gap or len(fc_layers) == 0, "Model should either use Global Average Pooling or avoid Fully Connected layers"

        def test_model_output_shape():
            model = Net()
            x = torch.randn(1, 1, 28, 28)  # MNIST input shape
            output = model(x)
            assert output.shape == (1, 10), f"Expected output shape (1, 10), got {output.shape}"

        def test_forward_pass():
            model = Net()
            x = torch.randn(1, 1, 28, 28)
            try:
                output = model(x)
            except Exception as e:
                pytest.fail(f"Forward pass failed: {str(e)}")
        EOL

    - name: Run tests
      run: |
        pytest test_model.py -v 